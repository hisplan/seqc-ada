version 1.0

task GetNumOfReads {

    input {
        File fastqcZip
    }

    parameter_meta {
        fastqcZip : { help: "zip file produced by FASTQC" }
    }

    command <<<
        set -euo pipefail

        # fixme: use ubuntu image with unzip preinstalled
        apt-get update -y
        apt-get install -y unzip

        unzip ~{fastqcZip}
        fastqc_data_file="~{basename(fastqcZip, '.zip')}/fastqc_data.txt"

        grep "Total Sequences" ${fastqc_data_file} | awk -F'\t' '{ print $2 }' > n_reads.txt
    >>>

    output {
        Int numOfReads = read_int("n_reads.txt")
    }

    runtime {
        docker: "ubuntu:20.04"
        cpu: 1
        memory: "1 GB"
    }
}

task GetTotalReads {

    input {
        Array[File] fastqcZip
    }

    parameter_meta {
        fastqcZip : { help: "a list of zip files produced by FASTQC" }
    }

    command <<<
        set -euo pipefail

        # fixme: use ubuntu image with unzip preinstalled
        apt-get update -y
        apt-get install -y unzip

        # create a file, ensure nothing in it
        touch n_reads.txt
        truncate -s 0 n_reads.txt

        # get number of reads of each fastqc zip file
        for filename in ~{sep=' ' fastqcZip}
        do
            # unzip
            unzip -o ${filename}
            # remove the .zip extension
            fastqc_data_file="$(basename -s .zip $filename)/fastqc_data.txt"
            # get number of reads
            grep "Total Sequences" ${fastqc_data_file} | awk -F'\t' '{ print $2 }' >> n_reads.txt
        done

        # sum up reads
        awk '{ n += $1 }; END { print n }' n_reads.txt > total_reads.txt
    >>>

    output {
        Int totalReads = read_int("total_reads.txt")
    }

    runtime {
        docker: "ubuntu:20.04"
        cpu: 1
        memory: "1 GB"
    }
}

task GetNumOfCells {

    input {
        File seqcMiniSummary
    }

    parameter_meta {
        seqcMiniSummary : { help: "JSON mini summary generated by SEQC" }
    }

    command <<<
        set -euo pipefail

        python - << EOF
        import json

        with open("~{seqcMiniSummary}", "rt") as fin:
            data = json.load(fin)
            print(data["n_cells"])
        EOF
    >>>

    output {
        Int numOfCells = read_int(stdout())
    }

    runtime {
        docker: "python:3.9.6"
        cpu: 1
        memory: "1 GB"
    }
}

task CalcSeqcRequiredMemory {

    input {
        Int numOfReads
    }

    command <<<
        set -euo pipefail

        python - << EOF
        # in million
        num_reads = ~{numOfReads} / 1e6

        # fixme: figure out based on the past results
        if num_reads > 300:
            mem_gb = 120
        else:
            mem_gb = 64

        print(mem_gb)
        EOF
    >>>

    output {
        Int memoryGB = read_int(stdout())
    }

    runtime {
        docker: "python:3.9.6"
        cpu: 1
        memory: "1 GB"
    }
}

task CalcRawCountMatrixMemory {

    input {
        File sparseBarcodes
        File sparseGenes
    }

    parameter_meta {
        sparseBarcodes : { help: "cell barcode list generated by SEQC or Cell Ranger" }
        sparseGenes : { help: "feature (gene) list generated by SEQC or Cell Ranger" }
    }

    command <<<
        set -euo pipefail

        n_barcodes=`wc -l < ~{sparseBarcodes}`
        n_genes=`wc -l < ~{sparseGenes}`

        python - << EOF
        mem_gb = int(${n_barcodes} * ${n_genes} * 8 / 1024 / 1024 / 1024)
        print(mem_gb)
        EOF
    >>>

    output {
        Int memoryGB = read_int(stdout())
    }

    runtime {
        docker: "python:3.9.6"
        cpu: 1
        memory: "1 GB"
    }
}
